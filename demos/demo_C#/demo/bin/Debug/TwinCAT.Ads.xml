<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TwinCAT.Ads</name>
    </assembly>
    <members>
        <member name="T:TwinCAT.Ads.AdsNotificationEventArgs">
            <summary>
            Provides data for AdsNotificationEvent of the class TcAdsClient.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsNotificationEventArgs.#ctor(System.Int64,System.Object,System.Int32,System.Int32,System.Int32,TwinCAT.Ads.AdsStream)">
            <summary>
            Initializes a new instance of the AdsStream class AdsSyncNotificationEventArgs.
            </summary>
            <param name="timeStamp">Timespamp.</param>
            <param name="userData">An object, that is passed by AddDeviceNotification.</param>
            <param name="notificationHandle">Handle of the connection.</param>
            <param name="length">Length of the data in dataStream.</param>
            <param name="offset">The offset of the data in dataStream .</param>
            <param name="dataStream">Stream that is used to store the data.</param>		
        </member>
        <member name="P:TwinCAT.Ads.AdsNotificationEventArgs.TimeStamp">
            <summary>
            Gets the timestamp.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsNotificationEventArgs.UserData">
            <summary>
            Gets the user object. This object is passed by to AddDeviceNotification and can 
            be used to store data.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsNotificationEventArgs.NotificationHandle">
            <summary>
            Gets the handle of the connection.		
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsNotificationEventArgs.DataStream">
            <summary>
            Streams that holds the notification data.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsNotificationEventArgs.Length">
            <summary>
            Gets the Length of the data in the stream.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsNotificationEventArgs.Offset">
            <summary>
            Gets the Offset of the data in the stream.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AdsNotificationExEventArgs">
            <summary>
            Provides data for AdsNotificationExEvent of the class TcAdsClient.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsNotificationExEventArgs.#ctor(System.Int64,System.Object,System.Int32,System.Object)">
            <summary>
            Initializes a new instance of the AdsStream class AdsSyncNotificationEventArgs.
            </summary>
            <param name="timeStamp">Timestamp.</param>
            <param name="userData">An object, that is passed by AddDeviceNotificationEx.</param>
            <param name="notificationHandle">Handle of the connection.</param>
            <param name="value">Value of the ADS variable.</param>
        </member>
        <member name="P:TwinCAT.Ads.AdsNotificationExEventArgs.TimeStamp">
            <summary>
            Gets the timestamp.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsNotificationExEventArgs.UserData">
            <summary>
            Gets the user object. This object is passed by to AddDeviceNotification and can 
            be used to store data.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsNotificationExEventArgs.Value">
            <summary>
            Value of the ads variable.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsNotificationExEventArgs.NotificationHandle">
            <summary>
            Gets the handle of the connection.		
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AmsRouterNotificationEventArgs">
            <summary>
            Provides data for AmsRouterNotificationEvent of the class TcAdsClient.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AmsRouterNotificationEventArgs.#ctor(TwinCAT.Ads.AmsRouterState)">
            <summary>
            Initializes a new instance of the AmsRouterNotificationEventArgs class.
            </summary>
            <param name="state">The current state of the Router.</param>
        </member>
        <member name="P:TwinCAT.Ads.AmsRouterNotificationEventArgs.State">
            <summary>
            Current state of the Ams Router.
            </summary>							
        </member>
        <member name="T:TwinCAT.Ads.AdsNotificationErrorEventArgs">
            <summary>
            Provides data for AdsNotificationErrorEvent of the class TcAdsClient.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsNotificationErrorEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the AdsNotificationErrorEventArgs class.
            </summary>
            <param name="e">Exception that was caught while handling notifications.</param>
        </member>
        <member name="P:TwinCAT.Ads.AdsNotificationErrorEventArgs.Exception">
            <summary>
            Exception that was caught while handling notifications.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AdsStateChangedEventArgs">
            <summary>
            Provides data for AdsStateChangedEvent of the class TcAdsClient.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsStateChangedEventArgs.#ctor(TwinCAT.Ads.StateInfo)">
            <summary>
            Initializes a new instance of the AdsStateChangedEventArgs class.
            </summary>
            <param name="state">Current state of the ADS device.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsStateChangedEventArgs.#ctor(TwinCAT.Ads.AdsStateChangedEventArgs)">
            <summary>
            Initializes a new instance of the AdsStateChangedEventArgs class.
            </summary>
            <param name="eventArgs"></param>
        </member>
        <member name="P:TwinCAT.Ads.AdsStateChangedEventArgs.State">
            <summary>
            Current state of the ADS device.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AdsSymbolVersionChangedEventArgs">
            <summary>
            Provides data for AdsSymbolVersionChangedEvent of the class TcAdsClient.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsSymbolVersionChangedEventArgs.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the AdsSymbolVersionChangedEventArgs class.
            </summary>
            <param name="symbolVersion">Current symbol version.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsSymbolVersionChangedEventArgs.#ctor(TwinCAT.Ads.AdsSymbolVersionChangedEventArgs)">
            <summary>
            Initializes a new instance of the AdsSymbolVersionChangedEventArgs class.
            </summary>
            <param name="eventArgs"></param>
        </member>
        <member name="P:TwinCAT.Ads.AdsSymbolVersionChangedEventArgs.SymbolVersion">
            <summary>
            Current symbol version device.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AdsNotificationEventHandler">
            <summary>
            Event handler for the AdsNotification event in the class TcAdsClient.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AdsNotificationExEventHandler">
            <summary>
            Event handler for the AdsNotification event in the class TcAdsClient.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AmsRouterNotificationEventHandler">
            <summary>
            Event handler for the AmsRouterNotification event in the class TcAdsClient.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AdsNotificationErrorEventHandler">
            <summary>
            Event handler for the AdsNotificationError event in the class TcAdsClient.
            </summary>	
        </member>
        <member name="T:TwinCAT.Ads.AdsStateChangedEventHandler">
            <summary>
            Event handler for the AdsStateChanged event in the class TcAdsClient.
            </summary>	
        </member>
        <member name="T:TwinCAT.Ads.TcAdsClient">
            <summary>
            The class TcAdsClient is a wrapper for the TcAdsdll.dll and enables synchronous access
            to an Ads device. 
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.#ctor">
            <summary>
            Initializes a new instance of the class TcAdsClient.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.Dispose">
            <summary>
            Releases the resources used by TcAdsClient.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.Dispose(System.Boolean)">
            <summary>
            Disposes the <see cref="T:TwinCAT.Ads.TcAdsClient"/>.
            </summary>
            <param name="disposing"></param>
            <remarks>When overwritten don't forget to call the base class</remarks>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.Connect(System.String,System.Int32)">
            <summary>
            Establishes a connection to a ADS device.
            </summary>
            <param name="netID">NetId of the ADS server.</param>
            <param name="srvPort">Port number of the ADS server.</param>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.Connect(System.Byte[],System.Int32)">
            <summary>
            Establishes a connection to a ADS device.
            </summary>
            <param name="netID">NetId of the ADS server.</param>
            <param name="srvPort">Port number of the ADS server.</param>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.Connect(System.Int32)">
            <summary>
            Establishes a connection to a ADS device using the local netID.
            </summary>
            <param name="srvPort">Port number of the ADS server.</param>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.Connect(TwinCAT.Ads.AmsNetId,System.Int32)">
            <summary>
            Establishes a connection to a ADS device.
            </summary>
            <param name="netID">NetId of the ADS server.</param>
            <param name="srvPort">Port number of the ADS server.</param>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.Connect(TwinCAT.Ads.AmsNetId,TwinCAT.Ads.AmsPort)">
            <summary>
            Establishes a connection to a ADS device.
            </summary>
            <param name="netID">NetId of the ADS server.</param>
            <param name="srvPort">Port number of the ADS server.</param>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.Read(System.Int32,System.Int32,TwinCAT.Ads.AdsStream,System.Int32,System.Int32)">
            <summary>
            Reads data synchronously from an ADS device and writes it to the given stream. 
            </summary>		
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="dataStream">Stream that receives the data.</param>
            <param name="offset">Offset of the data in dataStream.</param>		
            <param name="length">Length of the data in dataStream.</param>
            <returns>Number of succesfully returned data bytes.</returns>		
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.Read(System.Int32,System.Int32,TwinCAT.Ads.AdsStream)">
            <summary>
            Reads data synchronously from an ADS device and writes it to the given stream. 
            </summary>		
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="dataStream">Stream that receives the data.</param>
            <returns>Number of succesfully returned data bytes.</returns>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.Read(System.Int64,System.Int64,TwinCAT.Ads.AdsStream,System.Int32,System.Int32)">
            <summary>
            Reads data synchronously from an ADS device and writes it to the given stream. 
            </summary>		
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="dataStream">Stream that receives the data.</param>
            <param name="offset">Offset of the data in dataStream.</param>		
            <param name="length">Length of the data in dataStream.</param>
            <returns>Number of succesfully returned data bytes.</returns>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.Read(System.Int64,System.Int64,TwinCAT.Ads.AdsStream)">
            <summary>
            Reads data synchronously from an ADS device and writes it to the given stream.		
            </summary>				
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="dataStream">Stream that receives the data.</param>
            <returns>Number of succesfully returned data bytes.</returns>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.Read(System.Int32,TwinCAT.Ads.AdsStream,System.Int32,System.Int32)">
            <summary>
            Reads data synchronously from an ADS device and writes it to the given stream. 
            </summary>		
            <param name="variableHandle">Handle of the ADS variable</param>
            <param name="dataStream">Stream that receives the data.</param>
            <param name="offset">Offset of the data in dataStream.</param>		
            <param name="length">Length of the data in dataStream.</param>
            <returns>Number of succesfully returned data bytes.</returns>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.Read(System.Int32,TwinCAT.Ads.AdsStream)">
            <summary>
            Reads data synchronously from an ADS device and writes it to the given stream. 
            </summary>		
            <param name="variableHandle">Handle of the ADS variable</param>
            <param name="dataStream">Stream that receives the data.</param>
            <returns>Number of succesfully returned data bytes.</returns>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.Write(System.Int32,System.Int32,TwinCAT.Ads.AdsStream,System.Int32,System.Int32)">
            <summary>
            Writes data synchronously to an ADS device.
            </summary>		
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="dataStream">Stream that contains the data.</param>
            <param name="offset">Offset of the data in dataStream.</param>		
            <param name="length">Length of the data in dataStream.</param>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.Write(System.Int32,System.Int32,TwinCAT.Ads.AdsStream)">
            <summary>
            Writes data synchronously to an ADS device.
            </summary>		
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="dataStream">Stream that receives the data.</param>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.Write(System.Int32,System.Int32)">
            <summary>
            Writes data synchronously to an ADS device.		
            </summary>		
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.Write(System.Int64,System.Int64,TwinCAT.Ads.AdsStream,System.Int32,System.Int32)">
            <summary>
            Writes data synchronously to an ADS device.		
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="dataStream">Stream that contains the data.</param>
            <param name="offset">Offset of the data in dataStream.</param>		
            <param name="length">Length of the data in dataStream.</param>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.Write(System.Int64,System.Int64,TwinCAT.Ads.AdsStream)">
            <summary>
            Writes data synchronously to an ADS device.		
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="dataStream">Stream that receives the data.</param>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.Write(System.Int64,System.Int64)">
            <summary>
            Writes data synchronously to an ADS device.		
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>		
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.Write(System.Int32,TwinCAT.Ads.AdsStream,System.Int32,System.Int32)">
            <summary>
            Writes data synchronously to an ADS device.		
            </summary>
            <param name="variableHandle">Handle of the ADS variable</param>
            <param name="dataStream">Stream that contains the data.</param>
            <param name="offset">Offset of the data in dataStream.</param>		
            <param name="length">Length of the data in dataStream.</param>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.Write(System.Int32,TwinCAT.Ads.AdsStream)">
            <summary>
            Writes data synchronously to an ADS device.		
            </summary>
            <param name="variableHandle">Handle of the ADS variable</param>
            <param name="dataStream">Stream that receives the data.</param>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.ReadAny(System.Int32,System.Type,System.Int32[])">
            <summary>
            Reads data synchronously from an ADS device and writes it to an object.
            If the Type of the object to be read is a string type, the first element of 
            the parameter args specifies the number of characters of the string.
            If the Type of the object to be read is an array type, the number of elements
            for each dimension has to be specified in the parameter args. At the moment
            only 1 dimensional Arrays are supported.
            </summary>
            <param name="variableHandle">Handle of the ADS variable.</param>
            <param name="type">Type of the object to be read.</param>		
            <param name="args">Additional arguments.</param>
            <returns>The object the read data is written to.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.ReadAny(System.Int32,System.Type)">
            <summary>
            Reads data synchronously from an ADS device and writes it to an object.
            </summary>
            <param name="variableHandle">Handle of the ADS variable.</param>
            <param name="type">Type of the object to be read.</param>		
            <returns>The object the read data is written to.</returns>				
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.ReadAny(System.Int64,System.Int64,System.Type,System.Int32[])">
            <summary>
            Reads data synchronously from an ADS device and writes it to an object.
            If the Type of the object to be read is a string type, the first element of 
            the parameter args specifies the number of characters of the string.
            If the Type of the object to be read is an array type, the number of elements
            for each dimension has to be specified in the parameter args. At the moment
            only 1 dimensional Arrays are supported.		
            </summary>
            <param name="indexGroup">Index group of the ADS variable.</param>
            <param name="indexOffset">Index offset of the ADS variable.</param>
            <param name="type">Type of the object to be read.</param>		
            <param name="args">Additional arguments.</param>
            <returns>The object the read data is written to.</returns>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.ReadAny(System.Int64,System.Int64,System.Type)">
            <summary>
            Reads data synchronously from an ADS device and writes it to an object.		 
            </summary>
            <param name="indexGroup">Index group of the ADS variable.</param>
            <param name="indexOffset">Index offset of the ADS variable.</param>
            <param name="type">Type of the object to be read.</param>		
            <returns>The object the read data is written to.</returns>						
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.WriteAny(System.Int64,System.Int64,System.Object)">
            <summary>
            Writes an object synchronously to an ADS device.		
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="value">Object to write to the ADS device.</param>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.WriteAny(System.Int32,System.Object)">
            <summary>
            Writes an object synchronously to an ADS device.		
            </summary>
            <param name="variableHandle">Handle of the ADS variable.</param>
            <param name="value">Object to write to the ADS device.</param>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.WriteAny(System.Int64,System.Int64,System.Object,System.Int32[])">
            <summary>
            Writes an object synchronously to an ADS device.		
            If the Type of the object to be written is a string type, the first element of parameter args 
            specifies the number of characters of the string.		
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="value">Object to write to the ADS device.</param>
            <param name="args">Additional arguments.</param>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.WriteAny(System.Int32,System.Object,System.Int32[])">
            <summary>
            Writes an object synchronously to an ADS device.		
            If the Type of the object to be written is a string type, the first element of parameter args 
            specifies the number of characters of the string.		
            </summary>
            <param name="variableHandle">Handle of the ADS variable.</param>
            <param name="value">Object to write to the ADS device.</param>
            <param name="args">Additional arguments.</param>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.ReadWrite(System.Int64,System.Int64,TwinCAT.Ads.AdsStream,System.Int32,System.Int32,TwinCAT.Ads.AdsStream,System.Int32,System.Int32)">
            <summary>
            Writes data synchronously to an ADS device and then Reads data from this device.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="rdDataStream">Stream that receives the data that has been read.</param>
            <param name="rdOffset">Offset of the data in rdDataStream.</param>
            <param name="rdLength">Length of the data in rdDataStream.</param>
            <param name="wrDataStream">Stream that contains the data that should be written.</param>
            <param name="wrOffset">Offset of the data in wrDataStream.</param>
            <param name="wrLength">Lenght of the data in wrDataStream.</param>
            <returns>Number of succesfully returned data bytes.</returns>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.ReadWrite(System.Int32,System.Int32,TwinCAT.Ads.AdsStream,System.Int32,System.Int32,TwinCAT.Ads.AdsStream,System.Int32,System.Int32)">
            <summary>
            Writes data synchronously to an ADS device and then Reads data from this device.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="rdDataStream">Stream that receives the data that has been read.</param>
            <param name="rdOffset">Offset of the data in rdDataStream.</param>
            <param name="rdLength">Length of the data in rdDataStream.</param>
            <param name="wrDataStream">Stream that contains the data that should be written.</param>
            <param name="wrOffset">Offset of the data in wrDataStream.</param>
            <param name="wrLength">Lenght of the data in wrDataStream.</param>
            <returns>Number of succesfully returned data bytes.</returns>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.ReadWrite(System.Int32,System.Int32,TwinCAT.Ads.AdsStream,TwinCAT.Ads.AdsStream)">
            <summary>
            Writes data synchronously to an ADS device and then Reads data from this device.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="rdDataStream">Stream that receives the data that has been read.</param>
            <param name="wrDataStream">Stream that contains the data that should be written.</param>
            <returns>Number of succesfully returned data bytes.</returns>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.ReadWrite(System.Int64,System.Int64,TwinCAT.Ads.AdsStream,TwinCAT.Ads.AdsStream)">
            <summary>
            Writes data synchronously to an ADS device and then Reads data from this device.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="rdDataStream">Stream that receives the data that has been read.</param>
            <param name="wrDataStream">Stream that contains the data that should be written.</param>
            <returns>Number of succesfully returned data bytes.</returns>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.AddDeviceNotificationEx(System.Int64,System.Int64,TwinCAT.Ads.AdsTransMode,System.Int32,System.Int32,System.Object,System.Type)">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the AdsNotification event.		
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="transMode">Specifies if the event should be fired cyclically or only if the variable has changed.</param>
            <param name="cycleTime">The ADS server checks whether the variable has changed after this time interval. Unit is in ms.</param>
            <param name="maxDelay">The AdsNotification event is fired at the latest when this time has elapsed. The unit is ms.</param>
            <param name="userData">This object can be used to store user specific data.</param>
            <param name="type">Type of the object stored in the event argument.</param>
            <returns>The handle of the notification.</returns>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>				
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.AddDeviceNotificationEx(System.Int64,System.Int64,TwinCAT.Ads.AdsTransMode,System.Int32,System.Int32,System.Object,System.Type,System.Int32[])">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the AdsNotification event.		
            If type is a string type, the first element of the parameter args specifies the number of characters of the string.
            If type is an array type, the number of elements for each dimension has to be specified in the parameter args. 
            At the moment only 1 dimensional Arrays are supported.				
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="transMode">Specifies if the event should be fired cyclically or only if the variable has changed.</param>
            <param name="cycleTime">The ADS server checks whether the variable has changed after this time interval. Unit is in ms.</param>
            <param name="maxDelay">The AdsNotification event is fired at the latest when this time has elapsed. The unit is ms.</param>
            <param name="userData">This object can be used to store user specific data.</param>
            <param name="type">Type of the object s0000tored in the event argument.</param>
            <param name="args">Additional arguments.</param>		
            <returns>The handle of the notification.</returns>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>				
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.AddDeviceNotificationEx(System.String,TwinCAT.Ads.AdsTransMode,System.Int32,System.Int32,System.Object,System.Type)">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the AdsNotification event.		
            </summary>
            <param name="variableName">Name of the ADS variable.</param>
            <param name="transMode">Specifies if the event should be fired cyclically or only if the variable has changed.</param>
            <param name="cycleTime">The ADS server checks whether the variable has changed after this time interval. Unit is in ms.</param>
            <param name="maxDelay">The AdsNotification event is fired at the latest when this time has elapsed. The unit is ms.</param>
            <param name="userData">This object can be used to store user specific data.</param>
            <param name="type">Type of the object stored in the event argument.</param>
            <returns>The handle of the notification.</returns>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>				
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.AddDeviceNotificationEx(System.String,TwinCAT.Ads.AdsTransMode,System.Int32,System.Int32,System.Object,System.Type,System.Int32[])">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the AdsNotification event.		
            </summary>
            <param name="variableName">Name of the ADS variable.</param>
            <param name="transMode">Specifies if the event should be fired cyclically or only if the variable has changed.</param>
            <param name="cycleTime">The ADS server checks whether the variable has changed after this time interval. Unit is in ms.</param>
            <param name="maxDelay">The AdsNotification event is fired at the latest when this time has elapsed. The unit is ms.</param>
            <param name="userData">This object can be used to store user specific data.</param>
            <param name="type">Type of the object stored in the event argument.</param>
            <param name="args">Additional arguments.</param>
            <returns>The handle of the notification.</returns>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>				
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.AddDeviceNotification(System.Int32,System.Int32,TwinCAT.Ads.AdsStream,System.Int32,System.Int32,TwinCAT.Ads.AdsTransMode,System.Int32,System.Int32,System.Object)">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the AdsNotification event.		
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="dataStream">The stream that should receive the data.</param>
            <param name="offset">Offset of the data in dataStream.</param>
            <param name="length">Length of the data in dataStream.</param>		
            <param name="transMode">Specifies if the event should be fired cyclically or only if the variable has changed.</param>
            <param name="cycleTime">The ADS server checks whether the variable has changed after this time interval. Unit is in ms.</param>
            <param name="maxDelay">The AdsNotification event is fired at the latest when this time has elapsed. The unit is ms.</param>
            <param name="userData">This object can be used to store user specific data.</param>
            <returns>The handle of the notification.</returns>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.AddDeviceNotification(System.Int32,System.Int32,TwinCAT.Ads.AdsStream,TwinCAT.Ads.AdsTransMode,System.Int32,System.Int32,System.Object)">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the AdsNotification event.				
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="dataStream">The stream that should receive the data.</param>
            <param name="transMode">Specifies if the event should be fired cyclically or only if the variable has changed.</param>
            <param name="cycleTime">The ADS server checks whether the variable has changed after this time interval. Unit is in ms.</param>
            <param name="maxDelay">The AdsNotification event is fired at the latest when this time has elapsed. The unit is ms.</param>
            <param name="userData">This object can be used to store user specific data.</param>
            <returns>The handle of the notification.</returns>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.AddDeviceNotification(System.Int64,System.Int64,TwinCAT.Ads.AdsStream,System.Int32,System.Int32,TwinCAT.Ads.AdsTransMode,System.Int32,System.Int32,System.Object)">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the AdsNotification event.				
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="dataStream">The stream that should receive the data.</param>
            <param name="offset">Offset of the data in dataStream.</param>
            <param name="length">Length of the data in dataStream.</param>
            <param name="transMode">Specifies if the event should be fired cyclically or only if the variable has changed.</param>
            <param name="cycleTime">The ADS server checks whether the variable has changed after this time interval. Unit is in ms.</param>
            <param name="maxDelay">The AdsNotification event is fired at the latest when this time has elapsed. The unit is ms. </param>
            <param name="userData">This object can be used to store user specific data.</param>
            <returns>The handle of the notification.</returns>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.AddDeviceNotification(System.Int64,System.Int64,TwinCAT.Ads.AdsStream,TwinCAT.Ads.AdsTransMode,System.Int32,System.Int32,System.Object)">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the AdsNotification event.				
            </summary>		
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="dataStream">The stream that should receive the data.</param>
            <param name="transMode">Specifies if the event should be fired cyclically or only if the variable has changed.</param>
            <param name="cycleTime">The ADS server checks whether the variable has changed after this time interval. Unit is in ms.</param>
            <param name="maxDelay">The AdsNotification event is fired at the latest when this time has elapsed. The unit is ms.</param>
            <param name="userData">This object can be used to store user specific data.</param>
            <returns>The handle of the notification.</returns>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.AddDeviceNotification(System.String,TwinCAT.Ads.AdsStream,System.Int32,System.Int32,TwinCAT.Ads.AdsTransMode,System.Int32,System.Int32,System.Object)">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the AdsNotification event.				
            </summary>		
            <param name="variableName">Name of the ADS variable.</param>
            <param name="dataStream">The stream that should receive the data.</param>
            <param name="offset">Offset of the data in dataStream.</param>
            <param name="length">Length of the data in dataStream.</param>
            <param name="transMode">Specifies if the event should be fired cyclically or only if the variable has changed.</param>
            <param name="cycleTime">The ADS server checks whether the variable has changed after this time interval. Unit is in ms.</param>
            <param name="maxDelay">The AdsNotification event is fired at the latest when this time has elapsed. The unit is ms. </param>
            <param name="userData">This object can be used to store user specific data.</param>
            <returns>The handle of the notification.</returns>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.AddDeviceNotification(System.String,TwinCAT.Ads.AdsStream,TwinCAT.Ads.AdsTransMode,System.Int32,System.Int32,System.Object)">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the AdsNotification event.				
            </summary>		
            <param name="variableName">Name of the ADS variable.</param>
            <param name="dataStream">The stream that should receive the data.</param>
            <param name="transMode">Specifies if the event should be fired cyclically or only if the variable has changed.</param>
            <param name="cycleTime">The ADS server checks whether the variable has changed after this time interval. Unit is in ms.</param>
            <param name="maxDelay">The AdsNotification event is fired at the latest when this time has elapsed. The unit is ms. </param>
            <param name="userData">This object can be used to store user specific data.</param>
            <returns>The handle of the notification.</returns>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.DeleteDeviceNotification(System.Int32)">
            <summary>
            Deletes an existing notification.
            </summary>
            <param name="notificationHandle">Handle of the notification.</param>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.ReadDeviceInfo">
            <summary>
            Reads the identification and version number of an ADS server.
            </summary>
            <returns>DeviceInfo struct containing the name of the device and the version information.</returns>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.WriteControl(TwinCAT.Ads.StateInfo,TwinCAT.Ads.AdsStream,System.Int32,System.Int32)">
            <summary>
            Changes the ADS status and the device status of an ADS server.
            </summary>
            <param name="stateInfo">New ADS status and device status.</param>
            <param name="dataStream">Stream that contains the data that should be sent to the ADS device</param>
            <param name="offset">Offset of the data in the stream.</param>
            <param name="length">Length of the data in the stream.</param>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.WriteControl(TwinCAT.Ads.StateInfo)">
            <summary>
            Changes the ADS status and the device status of an ADS server.
            </summary>
            <param name="stateInfo">New ADS status and device status.</param>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.ReadState">
            <summary>
            Reads the ADS status and the device status from an ADS server.
            </summary>
            <returns>The ADS statue and device status.</returns>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.TryReadState(TwinCAT.Ads.StateInfo@)">
            <summary>
            Reads the ADS status and the device status from an ADS server. Unlike the ReadState method this method does not call an exception on failure. Instead an AdsErrorCode is returned. 
            If the return value is equal to AdsErrorCode.NoError the call was successfull.
            </summary>
            <param name="stateInfo">The ADS statue and device status.</param>
            <returns>AdsErrorCode of the ads read state call. Check for AdsErrorCode.NoError to see if call was successfull.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.CreateVariableHandle(System.String)">
            <summary>
            Generates a unique handle for an ADS variable.
            </summary>
            <param name="variableName">Name of the ADS variable</param>
            <returns>The handle of the ADS Variable.</returns>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.DeleteVariableHandle(System.Int32)">
            <summary>
            Releases the handle of a ADS variable again.
            </summary>
            <param name="variableHandle">Handle of the ADS variable</param>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.ReadSymbolInfo(System.String)">
            <summary>
            Call this method to obtain information about the individual symbols (variables) in ADS devices.
            </summary>
            <param name="name">Name of the symbol.</param>
            <returns>A ITcAdsSymbol containing the requested symbol inofrmation or null if symbol could not
            be found.</returns>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.CreateSymbolInfoLoader">
            <summary>
            Creates a new instance of the TcAdsSymbolInfoLoader class. With the help of this object one can load the symbol
            information of the ADS device.
            </summary>
            <returns>Instance of the TcAdsSymbolInfoLoader class.</returns>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.ReadSymbol(System.String,System.Type,System.Boolean)">
            <summary>
            Reads the value of a symbol and returns the value as object. The parameter type must have the same
            layout as the ADS symbol.
            </summary>
            <param name="name">Name of the ADS symbol.</param>
            <param name="type">Managed type of the ADS symbol.</param>
            <param name="reloadSymbolInfo">If reload is true previously stored symbol information is cleared. As a consequence the symbol information must be obtained from the ADS server again.</param>
            <returns>Value of the symbol</returns>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.WriteSymbol(System.String,System.Object,System.Boolean)">
            <summary>
            Writes the passed object value to the specified ADS symbol.The parameter type must have the same
            layout as the ADS symbol.
            </summary>
            <param name="name">Name of the ADS symbol.</param>
            <param name="value">Object holding the value to be written to the ADS symbol</param>
            <param name="reloadSymbolInfo">If reload is true previously stored symbol information is cleared. As a consequence the symbol information must be obtained from the ADS server again.</param>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.ReadSymbol(TwinCAT.Ads.ITcAdsSymbol)">
            <summary>
            Reads the value of a symbol and returns it as an object. Strings and all primitive datatypes(UInt32, Int32, Bool etc.) are supported.
            Arrays and structures cannot be read.
            </summary>
            <param name="symbol">The symbol that should be read.</param>
            <returns>The value of the symbol as an object.</returns>
            <exception cref="T:TwinCAT.Ads.AdsDatatypeNotSupportedException">Thrown when a ADS datatype is not supported.</exception>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsClient.WriteSymbol(TwinCAT.Ads.ITcAdsSymbol,System.Object)">
            <summary>
            Writes a value to the symbol. Strings and all primitive datatypes(UInt32, Int32, Bool etc.) are supported.  Array and structures are not supported.
            If a string is passed as parameter, the method attempts to parse the string according to the ADS datatype of the symbol.
            </summary>
            <param name="symbol">The symbol the value is written to.</param>
            <param name="val">The value to write.</param>
            <exception cref="T:TwinCAT.Ads.AdsDatatypeNotSupportedException">Thrown when a ADS datatype is not supported.</exception>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>		
        </member>
        <member name="P:TwinCAT.Ads.TcAdsClient.Disposed">
            <summary>
            Determines, whether the <see cref="T:TwinCAT.Ads.TcAdsClient"/> is disposed
            </summary>
        </member>
        <member name="E:TwinCAT.Ads.TcAdsClient.AdsNotification">
            <summary>
            Occurs when the Ads device sends a notification to the client.
            </summary>
        </member>
        <member name="E:TwinCAT.Ads.TcAdsClient.AdsNotificationEx">
            <summary>
            Occurs when the Ads devices sends a notification to the client.
            </summary>
        </member>
        <member name="E:TwinCAT.Ads.TcAdsClient.AdsNotificationError">
            <summary>
            Occurs when a exception has occured during notification management.
            </summary>		
        </member>
        <member name="E:TwinCAT.Ads.TcAdsClient.AmsRouterNotification">
            <summary>
            Occurs when the state of the local Router has changed. 
            </summary>				
        </member>
        <member name="E:TwinCAT.Ads.TcAdsClient.AdsStateChanged">
            <summary>
            Occurs when the ADS state changes.
            </summary>
        </member>
        <member name="E:TwinCAT.Ads.TcAdsClient.AdsSymbolVersionChanged">
            <summary>
            Occurs when the symbol version changes.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TcAdsClient.Timeout">
            <summary>
            Sets the timeout for the ads communication. Unit is in ms.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TcAdsClient.ClientCycle">
            <summary>
            Gets or sets a value indicating whether the TcAdsClient object uses a client cylce for the notificatons.
            </summary>	
            <remarks>
            If ClientCycle is set to false, the ADS that has been addressed writes the data cyclically 
            to the TcAdsClient object. The smallest possible time is the cycle time of the ADS device. 
            For the PLC, this is the task cycle time. The cycle time can be handled in 1 ms steps. 
            If you enter 0 ms as the cycle time, then the data is sent to the TcAdsClient object with 
            every cycle of the ADS device task.
            If ClientCylce is set to true, the TcAdsClient object polls the variables cyclically. 
            The timer that initiates the read / write runs in Windows NT/2000 user mode, which means 
            that the time behaviour strongly depends on the loading of the system.
            </remarks>	
        </member>
        <member name="P:TwinCAT.Ads.TcAdsClient.Synchronize">
            <summary>
            Gets or sets a value indicating whether the TcAdsClient object synchronizes the incoming notifcations. 
            </summary>
            <remarks>
            If Synchronize is set to true, the notifications are synchronized onto the Main thread.
            This is necessary for Windows Forms projects. In Console Application this property should
            be set to false.
            </remarks>		
        </member>
        <member name="P:TwinCAT.Ads.TcAdsClient.IsLocal">
            <summary>
            Gets a value indicating whether the ADS client is connected to a ADS Server on the local
            computer.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TcAdsClient.ServerPort">
            <summary>
            Gets the port number of the ADS server.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TcAdsClient.ServerNetID">
            <summary>
            Gets the AmsNetId of the ADS server.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TcAdsClient.ClientPort">
            <summary>
            Gets the port number of the ADS client.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TcAdsClient.ClientNetID">
            <summary>
            Get the AmsNetId of the ADS client.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TcAdsClient.IsConnected">
            <summary>
            Gets a value indicating whether the local Ads port was opened successfully. It
            does not indicate if the target port is available. Use the method ReadState to
            determine if the target port is available.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TcAdsClient.RouterState">
            <summary>
            Gets the current state of the local AMS router.
            </summary>		
        </member>
        <member name="T:TwinCAT.Ads.AdsException">
            <summary>
            Base class for all exceptions thrown by this class.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsException.#ctor">
            <summary>
            Initializes a new Instance of the AdsException class.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsException.#ctor(System.String)">
            <summary>
            Initializes a new Instance of the AdsException class.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new Instance of the AdsException class.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AdsDatatypeNotSupportedException">
            <summary>
            The exception that is thrown when a ADS datatype is not supported.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsDatatypeNotSupportedException.#ctor">
            <summary>
            Initiailizes a new Instance of the AdsDatatypeNotSupportedException class.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsDatatypeNotSupportedException.#ctor(System.String)">
            <summary>
            Initiailizes a new Instance of the AdsDatatypeNotSupportedException class.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsDatatypeNotSupportedException.#ctor(System.String,System.Exception)">
            <summary>
            Initiailizes a new Instance of the AdsDatatypeNotSupportedException class.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AdsInvalidNotificationException">
            <summary>
            This AdsInvalidNotificationException is created if the length of the notification data is 0.
            This indicates that the notification handle is not valid any more. This exception is passed 
            to the AdsNotificationErrorEvent.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsInvalidNotificationException.#ctor(System.Int32,System.Int64)">
            <summary>
            Initializes the class AdsInvalidNotificationException.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsInvalidNotificationException.Handle">
            <summary>
            Handle of the notification.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsInvalidNotificationException.TimeStamp">
            <summary>
            Timestamp.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AdsErrorException">
            <summary>
            The exception that is thrown when a Ads error occurs.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsErrorException.#ctor">
            <summary>
            Initializes a new Instance of the AdsErrorException class.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsErrorException.#ctor(System.String,TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Initializes a new Instance of the AdsErrorException class.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsErrorException.ErrorCode">
            <summary>
            Gets the error code of the Exception.
            </summary>		
        </member>
        <member name="M:TwinCAT.Ads.Internal.TcAdsDllWrapper.TcAdsDll.AdsGetDllVersion">
            TcAdsDll-Api Functions
        </member>
        <member name="T:TwinCAT.Ads.Internal.AmsAddressInternal">
            <summary>
            Ams/Ads Address
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AmsAddress">
            <summary>
            Ams/Ads Address
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.#ctor">
            <summary>
            Protected constructur
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.#ctor(TwinCAT.Ads.AmsAddress)">
            <summary>
            Copy constructor
            </summary>
            <param name="address"></param>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.#ctor(TwinCAT.Ads.AmsNetId,TwinCAT.Ads.AmsPort)">
            <summary>
            Constructor
            </summary>
            <param name="netId"></param>
            <param name="port"></param>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.#ctor(TwinCAT.Ads.AmsNetId,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="netId">Net Id</param>
            <param name="port">Port</param>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.#ctor(System.String,TwinCAT.Ads.AmsPort)">
            <summary>
            Constructor
            </summary>
            <param name="netId"></param>
            <param name="port"></param>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.#ctor(System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="netId"></param>
            <param name="port"></param>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.#ctor(System.Byte[],TwinCAT.Ads.AmsPort)">
            <summary>
            Constructor
            </summary>
            <param name="netId"></param>
            <param name="port"></param>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.#ctor(System.Byte[],System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="netId"></param>
            <param name="port"></param>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.#ctor(TwinCAT.Ads.AmsPort)">
            <summary>
            Constructor
            </summary>
            <param name="port"></param>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="port"></param>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.Equals(System.Object)">
            <summary>
            Equals
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.op_Equality(TwinCAT.Ads.AmsAddress,TwinCAT.Ads.AmsAddress)">
            <summary>
            Operator==
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.op_Inequality(TwinCAT.Ads.AmsAddress,TwinCAT.Ads.AmsAddress)">
            <summary>
            Operator-=
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.GetHashCode">
            <summary>
            Gets the HashCode of the Address
            </summary>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.ToString">
            <summary>
            Converts the Address to String 'NetId:Port'
            </summary>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.Parse(System.String)">
            <summary>
            Parses a string to an <see cref="T:TwinCAT.Ads.AmsAddress"/> object.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="P:TwinCAT.Ads.AmsAddress.NetId">
            <summary>
            Gets the NetId
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AmsAddress.Port">
            <summary>
            Gets the Port number
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.Internal.Trace">
            <summary>
            Summary description for Trace.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AdsBinaryReader">
            <summary>
            Derives from BinaryReader and reads primitive as well as PLC data types as binary values. 
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsBinaryReader.#ctor(TwinCAT.Ads.AdsStream)">
            <summary>
            Initializes a new instance of the AdsBinaryReader class based on the supplied stream.
            </summary>
            <param name="stream">A stream.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsBinaryReader.ReadPlcString(System.Int32)">
            <summary>
            Reads a PLC string from the current stream.
            </summary>
            <param name="length">The length of the string in the PLC.</param>
            <returns>The string being read.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsBinaryReader.ReadPlcDATE">
            <summary>
            Reads a PLC Date type from the current stream.
            </summary>
            <returns>The date being read.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsBinaryReader.ReadPlcTIME">
            <summary>
            Reads a PLC Time type from the current stream.
            </summary>
            <returns>The time being read.</returns>
        </member>
        <member name="T:TwinCAT.Ads.AdsBinaryWriter">
            <summary>
            Derives from BinaryWriter and writes primitive and PLC data types in binary to a stream.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsBinaryWriter.#ctor(TwinCAT.Ads.AdsStream)">
            <summary>
            Initializes a new instance of the AdsBinaryWriter class based on the supplied stream. 
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:TwinCAT.Ads.AdsBinaryWriter.WritePlcString(System.String,System.Int32)">
            <summary>
            Writes a string as a PLC string to the current stream.
            </summary>
            <param name="value">The string to write to the stream.</param>
            <param name="length">The length of the string in the PLC.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsBinaryWriter.WritePlcType(System.DateTime)">
            <summary>
            Writes a date as PLC date type to the current stream. 
            </summary>
            <param name="value">The date to write to the stream.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsBinaryWriter.WritePlcType(System.TimeSpan)">
            <summary>
            Writes a time span as PLC time type to the current stream.
            </summary>
            <param name="value">The time span to write to the stream.</param>
        </member>
        <member name="T:TwinCAT.Ads.AdsStream">
            <summary>
            The class AdsStream is a stream class used for Ads communication.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsStream.#ctor">
            <summary>
            Initializes a new instance of the AdsStream class. The instance has an expandable capacity initialized to zero. 
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsStream.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the AdsStream class.
            </summary>
            <param name="length">Length of the stream in bytes.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsStream.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the AdsStream class, based on the specified region of a byte array.
            </summary>
            <param name="buffer">The array of bytes from which to create this stream.</param>
            <param name="offset">The offset in buffer at which the stream begins.</param>
            <param name="length">The length of the stream in bytes.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsStream.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the AdsStream class, based on a byte array.
            </summary>
            <param name="buffer">The array of bytes from which to create this stream.</param>
        </member>
        <member name="T:TwinCAT.Ads.ITcAdsSymbol">
            <summary>
            Defines an Interface for reading the ADS symbol information.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.ITcAdsSymbol.IndexGroup">
            <summary>
            Gets the index group of the symbol.
            </summary>
            <value>Index group of the symbol.</value>
        </member>
        <member name="P:TwinCAT.Ads.ITcAdsSymbol.IndexOffset">
            <summary>
            Gets the index offset of the symbol.
            </summary>
            <value>Index offset of the symbol.</value>		
        </member>
        <member name="P:TwinCAT.Ads.ITcAdsSymbol.Size">
            <summary>
            Gets the size of the symbol.
            </summary>
            <value>Size of the symbol.</value>		
        </member>
        <member name="P:TwinCAT.Ads.ITcAdsSymbol.Datatype">
            <summary>
            Data type of the symbol.
            </summary>
            <value>Data type of the symbol.</value>		
        </member>
        <member name="P:TwinCAT.Ads.ITcAdsSymbol.Name">
            <summary>
            Gets the name of the symbol.
            </summary>
            <value>Name of the symbol.</value>		
        </member>
        <member name="P:TwinCAT.Ads.ITcAdsSymbol.Type">
            <summary>
            Gets the name of the symbol data type.
            </summary>
            <value>Name of the symbol data type.</value>		
        </member>
        <member name="P:TwinCAT.Ads.ITcAdsSymbol.Comment">
            <summary>
            Gets the comment behind the variable declaration.
            </summary>
            <value>Comment behind the variable declaration.</value>		
        </member>
        <member name="M:TwinCAT.Ads.Internal.TcAdsSymbol.GetManagedType">
            <summary>
            Gets the corresponding managed type of this symbol. This only works for
            primitive types.
            </summary>
            <returns>Managed type of symbol.</returns>
        </member>
        <member name="P:TwinCAT.Ads.Internal.TcAdsSymbol.IndexGroup">
            <summary>
            Gets the index group of the symbol.
            </summary>
            <value>Index group of the symbol.</value>
        </member>
        <member name="P:TwinCAT.Ads.Internal.TcAdsSymbol.IndexOffset">
            <summary>
            Gets the index offset of the symbol.
            </summary>
            <value>Index offset of the symbol.</value>		
        </member>
        <member name="P:TwinCAT.Ads.Internal.TcAdsSymbol.Size">
            <summary>
            Gets the size of the symbol.
            </summary>
            <value>Size of the symbol.</value>		
        </member>
        <member name="P:TwinCAT.Ads.Internal.TcAdsSymbol.Datatype">
            <summary>
            Data type of the symbol.
            </summary>
            <value>Data type of the symbol.</value>		
        </member>
        <member name="P:TwinCAT.Ads.Internal.TcAdsSymbol.Name">
            <summary>
            Gets the name of the symbol.
            </summary>
            <value>Name of the symbol.</value>		
        </member>
        <member name="P:TwinCAT.Ads.Internal.TcAdsSymbol.Type">
            <summary>
            Gets the name of the symbol data type.
            </summary>
            <value>Name of the symbol data type.</value>		
        </member>
        <member name="P:TwinCAT.Ads.Internal.TcAdsSymbol.Comment">
            <summary>
            Gets the comment behind the variable declaration.
            </summary>
            <value>Comment behind the variable declaration.</value>		
        </member>
        <member name="T:TwinCAT.Ads.AdsDatatypeId">
            <summary>
            ADS data types.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.TcAdsSymbolInfoCollection">
            <summary>
            Represents a collection of TcAdsSymbolInfo objects.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsSymbolInfoCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through ths symbols in this collection.
            </summary>
            <returns>
            An <c>IEnumerator</c> that can be used to iterate through all symbols in this collection.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsSymbolInfoCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the collection to an Array, starting at a 
            particular Array index.
            </summary>
            <param name="array">
            The one-dimensional <c>Array</c> that is the destination of the 
            elements copied from the collection. The 
            <c>Array</c> must have zero-based indexing.
            </param>
            <param name="index">
            The zero-based index in array at which copying begins.
            </param>
        </member>
        <member name="P:TwinCAT.Ads.TcAdsSymbolInfoCollection.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TcAdsSymbolInfoCollection.Count">
            <summary>
            Gets the number of elements 
            contained in the collection.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TcAdsSymbolInfoCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether 
            access to the collection is synchronized 
            (thread-safe).
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TcAdsSymbolInfoCollection.SyncRoot">
            <summary>
            Gets an object that can be used to 
            synchronize access to the collection.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.TcAdsSymbolInfo">
            <summary>
            The class TcAdsSymbolInfo represents a symbol loaded by an instance of the TcAdsSymbolInfoLoader class.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TcAdsSymbolInfo.Parent">
            <summary>
            Gets the parent of this symbol.
            </summary>
            <value>Parent of this symbol</value>
        </member>
        <member name="P:TwinCAT.Ads.TcAdsSymbolInfo.NextSymbol">
            <summary>
            Gets the next sibling of this symbol.
            </summary>
            <value>Next sibling of this symbol.</value>
        </member>
        <member name="P:TwinCAT.Ads.TcAdsSymbolInfo.FirstSubSymbol">
            <summary>
            Gets the next sub symbol of this symbol.
            </summary>
            <value>Next sub symbol.</value>
        </member>
        <member name="P:TwinCAT.Ads.TcAdsSymbolInfo.SubSymbols">
            <summary>
            Gets the sub symbols of this symbol as a collection of TcAdsSymbolInfo objects. 
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TcAdsSymbolInfo.SubSymbolCount">
            <summary>
            Gets the number of sub symbols.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TcAdsSymbolInfo.IndexGroup">
            <summary>
            Gets the index group of the symbol.
            </summary>
            <value>Index group of the symbol.</value>
        </member>
        <member name="P:TwinCAT.Ads.TcAdsSymbolInfo.IndexOffset">
            <summary>
            Gets the index offset of the symbol.
            </summary>
            <value>Index offset of the symbol.</value>		
        </member>
        <member name="P:TwinCAT.Ads.TcAdsSymbolInfo.Size">
            <summary>
            Gets the size of the symbol.
            </summary>
            <value>Size of the symbol.</value>		
        </member>
        <member name="P:TwinCAT.Ads.TcAdsSymbolInfo.Datatype">
            <summary>
            Data type of the symbol.
            </summary>
            <value>Data type of the symbol.</value>		
        </member>
        <member name="P:TwinCAT.Ads.TcAdsSymbolInfo.Name">
            <summary>
            Gets the name of the symbol.
            </summary>
            <value>Name of the symbol.</value>		
        </member>
        <member name="P:TwinCAT.Ads.TcAdsSymbolInfo.ShortName">
            <summary>
            Gets the name of the symbol (short form without prefixed names of the parents).
            </summary>
            <value>Full name of the symbol.</value>		
        </member>
        <member name="P:TwinCAT.Ads.TcAdsSymbolInfo.Type">
            <summary>
            Gets the name of the symbol data type.
            </summary>
            <value>Name of the symbol data type.</value>		
        </member>
        <member name="P:TwinCAT.Ads.TcAdsSymbolInfo.Comment">
            <summary>
            Gets the comment behind the variable declaration.
            </summary>
            <value>Comment behind the variable declaration.</value>		
        </member>
        <member name="T:TwinCAT.Ads.TcAdsSymbolInfoLoader">
            <summary>
            The class TcAdsSymbolInfoLoader is responsible for downloading the list of declared variables from an ADS Server.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsSymbolInfoLoader.GetSymbols(System.Boolean)">
            <summary>
            Loads the declared symbols from the ADS device and returns them as a collection of TcAdsSymbolInfo objects. 
            </summary>
            <param name="forceReload">True, if a (new) loading of the symbol information from the  server is required.</param>
            <returns>A collection of TcAdsSymbolInfo objects</returns>
            <remarks>If no symbols have been loaded before, the symbols are loaded from the server, regardless of the parameter forceReload.
            <p><b>Note about the  PLC:</b> Please attend to the PLC Control that the 'Symbol-Download' under Project / Options / TwinCAT is activated. For further information please see the manual TwinCAT PLC Control. </p>
            <p><b>Note about NC:</b> The Symbol download has to be activated at each axis. This can de done in the configuration dialog of the axis under ‚General'. The field ‚Create Symbols' has to be marked. See manual of the TwinCAT System Manager.</p></remarks>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsSymbolInfoLoader.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through all symbols.
            </summary>
            <returns>
            An <c>IEnumerator</c> that can be used to iterate through all symbols.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsSymbolInfoLoader.FindSymbol(System.String)">
            <summary>
            Call this method to find a symbol in the list.
            </summary>
            <param name="name">Name of the symbol</param>
            <remarks>If no symbols have been loaded before, the symbols are loaded from the server, regardless of the parameter forceReload.
            <p><b>Note about the  PLC:</b> Please attend to the PLC Control that the 'Symbol-Download' under Project / Options / TwinCAT is activated. For further information please see the manual TwinCAT PLC Control. </p>
            <p><b>Note about NC:</b> The Symbol download has to be activated at each axis. This can de done in the configuration dialog of the axis under ‚General'. The field ‚Create Symbols' has to be marked. See manual of the TwinCAT System Manager.</p></remarks>
        </member>
        <member name="M:TwinCAT.Ads.TcAdsSymbolInfoLoader.GetSymbolCount(System.Boolean)">
            <summary>
            Call this method to get the number of declared symbols.
            </summary>
            <param name="forceReload">True, if a (new) loading of the symbol information from the  server is required.</param>
            <returns>Returns the number of symbols.</returns>		
            <remarks>If no symbols have been loaded before, the symbols are loaded from the server, regardless of the parameter forceReload.
            Note about the  PLC: Please attend to the PLC Control that the 'Symbol-Download' under Project / Options / TwinCAT is activated. For further information please see the manual TwinCAT PLC Control. 
            Note about NC: The Symbol download has to be activated at each axis. This can de done in the configuration dialog of the axis under ‚General'. The field ‚Create Symbols' has to be marked. See manual of the TwinCAT System Manager.</remarks>		
        </member>
        <member name="M:TwinCAT.Ads.TcAdsSymbolInfoLoader.GetFirstSymbol(System.Boolean)">
            <summary>
            Call this method to get the first symbol.
            </summary>
            <param name="forceReload">True, if a (new) loading of the symbol information from the  server is required.</param>
            <returns>Returns the first symbol or null if no symbols are available.</returns>		
            <remarks>If no symbols have been loaded before, the symbols are loaded from the server, regardless of the parameter forceReload.
            Note about the  PLC: Please attend to the PLC Control that the 'Symbol-Download' under Project / Options / TwinCAT is activated. For further information please see the manual TwinCAT PLC Control. 
            Note about NC: The Symbol download has to be activated at each axis. This can de done in the configuration dialog of the axis under ‚General'. The field ‚Create Symbols' has to be marked. See manual of the TwinCAT System Manager.</remarks>
        </member>
        <member name="T:TwinCAT.Ads.Internal.ServerCycleNotificationMngt">
            <summary>
            Summary description for NotificationMngt.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AmsNetId">
            <summary>
            AMS/ADS Net ID
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="netId"></param>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.#ctor(System.Byte[])">
            <summary>
            Constructor
            </summary>
            <param name="netId"></param>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.#ctor(TwinCAT.Ads.AmsNetId)">
            <summary>
            Copy Constructor
            </summary>
            <param name="netId"></param>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.ToString">
            <summary>
            Converts the netId to string
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.ToBytes">
            <summary>
            Converts the NetId object to byte array
            </summary>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.Clone">
            <summary>
            Clones the NetId
            </summary>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.GetNetIdString(System.Byte[])">
            <summary>
            Gets the netId string from the byte array
            </summary>
            <param name="netId"></param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.TryParse(System.String,TwinCAT.Ads.AmsNetId@)">
            <summary>
            Converts the string representation of the address to <see cref="T:TwinCAT.Ads.AmsNetId"/>.
            </summary>
            <param name="str"></param>
            <param name="netId"></param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.Parse(System.String)">
            <summary>
            Converts the string representation of the address to <see cref="T:TwinCAT.Ads.AmsNetId"/>.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.FromBinHexString(System.String)">
            <summary>
            Creates the <see cref="T:TwinCAT.Ads.AmsNetId"/> from bin hex string.
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.ToBinHex(TwinCAT.Ads.AmsNetId)">
            <summary>
            Converts the specified <see cref="T:TwinCAT.Ads.AmsNetId"/> to a BinHex string.
            </summary>
            <param name="netId">NetId to convert</param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.ToBinHex">
            <summary>
            Converts the <see cref="T:TwinCAT.Ads.AmsNetId"/> to a BinHex string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.NetIdsEqual(System.Byte[],System.Byte[])">
            <summary>
            Compares the NetIds
            </summary>
            <param name="netId1"></param>
            <param name="netId2"></param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.NetIdsEqual(System.Byte[])">
            <summary>
            Compares the netIds
            </summary>
            <param name="netId"></param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.IsSameTarget(TwinCAT.Ads.AmsNetId,TwinCAT.Ads.AmsNetId)">
            <summary>
            Determines whether the <see cref="T:TwinCAT.Ads.AmsNetId"/>s refer to the same target.
            </summary>
            <param name="netIDA">NetID of target system A</param>
            <param name="netIDB">NetID of target system B</param>
            <returns>
            	<c>true</c> if the target systems are the same, otherwise <c>false</c>.
            </returns>
            <remarks>In comparison to the <see cref="M:TwinCAT.Ads.AmsNetId.IsEqual(TwinCAT.Ads.AmsNetId,TwinCAT.Ads.AmsNetId)"/> or <see cref="M:TwinCAT.Ads.AmsNetId.Equals(System.Object)"/> methods, this Method alse
            checks against the LocalHost ID, which means that <see cref="P:TwinCAT.Ads.AmsNetId.LocalHost"/> is the same target as <see cref="P:TwinCAT.Ads.AmsNetId.Local"/></remarks>
            <seealso cref="M:TwinCAT.Ads.AmsNetId.IsEqual(TwinCAT.Ads.AmsNetId,TwinCAT.Ads.AmsNetId)"/>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.IsEqual(TwinCAT.Ads.AmsNetId,TwinCAT.Ads.AmsNetId)">
            <summary>
            Determines whether the specified <see cref="T:TwinCAT.Ads.AmsNetId"/>s are equal.
            </summary>
            <param name="netIDA">The net IDA.</param>
            <param name="netIDB">The net IDB.</param>
            <returns>
            	<c>true</c> if the specified net IDA is equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.Equals(System.Object)">
            <summary>
            Equals
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.op_Equality(TwinCAT.Ads.AmsNetId,TwinCAT.Ads.AmsNetId)">
            <summary>
            Operator==
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.op_Inequality(TwinCAT.Ads.AmsNetId,TwinCAT.Ads.AmsNetId)">
            <summary>
            Operator-=
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.GetHashCode">
            <summary>
            Gets the HashCode of the Address
            </summary>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.GetNetId(System.String)">
            <summary>
            Gets the net Id as byte array
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="P:TwinCAT.Ads.AmsNetId.IsLocal">
            <summary>
            Is the Address Local?
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AmsNetId.Empty">
            <summary>
            Creates an empty NetId ("0.0.0.0.0.0")
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AmsNetId.LocalHost">
            <summary>
            Creates the local NetId ("127.0.0.1.1.1")
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AmsNetId.Local">
            <summary>
            Gets the Local Net ID (System service must be running)
            </summary>
            <remarks>The system service must be running
            </remarks>
        </member>
        <member name="T:TwinCAT.Ads.AmsNetIdConverter">
            <summary>
            Type Converter class for the <see cref="T:TwinCAT.Ads.AmsNetId"/>.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetIdConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetIdConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetIdConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetIdConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetIdConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be null.</param>
            <returns>
            A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"/> that holds a standard set of valid values, or null if the data type does not support a standard set of values.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetIdConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether the collection of standard values returned from <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"/> is an exclusive list of possible values, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>
            true if the <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"/> returned from <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"/> is an exhaustive list of possible values; false if other values are possible.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetIdConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>
            true if <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"/> should be called to find a common set of values the object supports; otherwise, false.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetIdConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
            <summary>
            Returns whether the given value object is valid for this type and for the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="value">The <see cref="T:System.Object"/> to test for validity.</param>
            <returns>
            true if the specified value is valid for this object; otherwise, false.
            </returns>
        </member>
        <member name="T:TwinCAT.Ads.StateInfo">
            <summary>
            The structure contains the Ads state and device state.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.StateInfo.#ctor(TwinCAT.Ads.AdsState,System.Int16)">
            <summary>
            Initializes a new Instance of the StateInfo struct.
            </summary>
            <param name="adsState">Ads state.</param>
            <param name="deviceState">Device state.</param>
        </member>
        <member name="P:TwinCAT.Ads.StateInfo.AdsState">
            <summary>
            Gets or sets the Ads state.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.StateInfo.DeviceState">
            <summary>
            Gets or sets the device state.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.DeviceInfo">
            <summary>
            The structure contains the name and the version information of the device.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.DeviceInfo.Name">
            <summary>
            Gets or sets the name of the device.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.DeviceInfo.Version">
            <summary>
            Gets or sets the vesion information.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AdsVersion">
            <summary>
            The structure contains the version number, revision number and build number.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsVersion.Version">
            <summary>
            Gets or sets the version number.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsVersion.Revision">
            <summary>
            Gets or sets the revision number.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsVersion.Build">
            <summary>
            Gets or sets the build number.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AdsTransMode">
            <summary>
            Determines at what time the AdsSyncNotification-Event is fired.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsTransMode.Cyclic">
            <summary>
            The AdsSyncNotification-Event is fired cyclically. 
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsTransMode.OnChange">
            <summary>
            The AdsSyncNotification-Event is fired when the data changes.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AmsRouterState">
            <summary>
            State of the Ams Router.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsRouterState.Stop">
            <summary>
            Ams Router is stopped.
            </summary>	
        </member>
        <member name="F:TwinCAT.Ads.AmsRouterState.Start">
            <summary>
            Ams Router is started.
            </summary>			
        </member>
        <member name="F:TwinCAT.Ads.AmsRouterState.Removed">
            <summary>
            Ams Router has been removed.
            </summary>					
        </member>
        <member name="T:TwinCAT.Ads.AmsPort">
            <summary>
            AmsPorts
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.Router">
            <summary>
            AmsRouter (Port 1)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.Debugger">
            <summary>
            AmsDebugger (Port 2)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.Logger">
            <summary>
            Logger (Port 100)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.EventLog">
            <summary>
            Event Logger (Port 110)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R0_Realtime">
            <summary>
            R0 Realtime (Port 200)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R0_Trace">
            <summary>
            R0 Trace (Port 290)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R0_IO">
            <summary>
            R0 IO (Port 300)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R0_NC">
            <summary>
            NC (R0) (Portt 500)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R0_NCSAF">
            <summary>
            R0 Satzausführung (Port 5019
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R0_NCSVB">
            <summary>
            R0 Satzvorbereitung (Port 511)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R0_ISG">
            <summary>
            R0 ISG (Port 550)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R0_CNC">
            <summary>
            R0 CNC (Port 600)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R0_LINE">
            <summary>
            R0 Line (Port 700)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R0_PLC">
            <summary>
            R0 PLC (Port 800)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.PlcRuntime1">
            <summary>
            PLC RuntimeSystem 1 (Port 801)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.PlcRuntime2">
            <summary>
            PLC RöuntimeSystem 2 (Port 811)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.PlcRuntime3">
            <summary>
            PLC RuntimeSystem 3 (Port 821)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.PlcRuntime4">
            <summary>
            PLC RuntimeSystem 4 (Port 831)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.CamshaftController">
            <summary>
            Camshaft Controller (R0) (Port 900)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R0_CAMTOOL">
            <summary>
            R0 CAM Tool (Port 950)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R0_USER">
            <summary>
            R0 User (Port 2000)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.SystemService">
            <summary>
            System Service (AMSPORT_R3_SYSSERV, 10000)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_CTRLPROG">
            <summary>
            (Port 10000)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_SYSCTRL">
            <summary>
            (Port 10001)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_SYSSAMPLER">
            <summary>
            Port 10100
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_TCPRAWCONN">
            <summary>
            Port 10200
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_TCPIPSERVER">
            <summary>
            Port 10201
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_SYSMANAGER">
            <summary>
            Port 10300
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_SMSSERVER">
            <summary>
            Port 10400
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_MODBUSSERVER">
            <summary>
            Port 10500
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_S7SERVER">
            <summary>
            Port 10600
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_PLCCONTROL">
            <summary>
            Port 10800
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_NCCTRL">
            <summary>
            Port 11000
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_NCINTERPRETER">
            <summary>
            Port 11500
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_STRECKECTRL">
            <summary>
            Port 12000
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_CAMCTRL">
            <summary>
            Port 13000
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_SCOPE">
            <summary>
            Port 14000
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_SINECH1">
            <summary>
            Port 15000
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_CONTROLNET">
            <summary>
            Port 16000
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_OPCSERVER">
            <summary>
            Port 17000
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_OPCCLIENT">
            <summary>
            Port 17500
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.USEDEFAULT">
            <summary>
            
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AdsState">
            <summary>
            Describes the AdsState.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AdsReservedIndexGroups">
            <summary>
            Describes predefined Index-Groups.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AdsReservedIndexOffsets">
            <summary>
            Describes predefined Index-Offsets.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AdsErrorCode">
            <summary>
            Describes the Ads error that occured.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.NoError">
            <summary>
            No Error.
            <para>Error code: 0(0x000).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.InternalError">
            <summary>
            Internal Error.
            <para>Error code: 1(0x001).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.NoRTime">
            <summary>
            No Rtime. 
            <para>Error code: 2(0x002).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.LockedMemoryError">
            <summary>
            Allocation locked memory error.
            <para>Error code: 3(0x003).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.MailBoxError">
            <summary>
            Insert mailbox error.
            <para>Error code: 4(0x004).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.WrongHMsg">
            <summary>
            Wrong receive HMSG.
            <para>Error code: 5(0x005).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.TargetPortNotFound">
            <summary>
            Target port not found.
            <para>Error code: 6(0x006).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.TargetMachineNotFound">
            <summary>
            Target machine not found.
            <para>Error code: 7(0x007).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.UnknownCommandID">
            <summary>
            Unknown command ID.
            <para>Error code: 8(0x008).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.BadTaskID">
            <summary>
            Bad task ID.
            <para>Error code: 9(0x009).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.NoIO">
            <summary>
            No IO.
            <para>Error code: 10(0x00A).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.UnknwonAmsCommand">
            <summary>
            Unknown AMS command.
            <para>Error code: 11(0x00B).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.Win32Error">
            <summary>
            Win 32 error.
            <para>Error code: 12(0x00C).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.PortNotConnected">
            <summary>
            Port is not connected.
            <para>Error code: 13(0x00D).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.InvalidAmsLength">
            <summary>
            Invalid AMS length.
            <para>Error code: 14(0x00E).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.InvalidAmsNetID">
            <summary>
            Invalid AMS Net ID.
            <para>Error code: 15(0x00F).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.LowInstallLevel">
            <summary>
            Low Installation level.
            <para>Error code: 16(0x010).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.NoDebug">
            <summary>
            No debug available.
            <para>Error code: 17(0x011).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.PortDisabled">
            <summary>
            Port disabled.
            <para>Error code: 18(0x012).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.PortConnected">
            <summary>
            Port is already connected.
            <para>Error code: 19(0x013).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.AmsSyncWin32Error">
            <summary>
            AMS Sync Win32 error.
            <para>Error code: 20(0x014).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.SyncTimeOut">
            <summary>
            AMS Sync timeout.
            <para>Error code: 21(0x015).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.AmsSyncAmsError">
            <summary>
            AMS Sync AMS error
            <para>Error code: 22(0x016).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.AmsSyncNoIndexMap">
            <summary>
            AMS Sync no index map.
            <para>Error code: 23(0x017).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.InvalidAmsPort">
            <summary>
            Invalid AMS port.
            <para>Error code: 24(0x018).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.NoMemory">
            <summary>
            No memory.
            <para>Error code: 25(0x019).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.TCPSendError">
            <summary>
            TCP send error.
            <para>Error code: 26(0x01A).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.HostUnreachable">
            <summary>
            Host unreachable.
            <para>Error code: 27(0x1B).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.NoLockedMemory">
            <summary>
            Router: no locked memory.
            <para>Error code: 1280(0x500).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.MailboxFull">
            <summary>
            Router: mailbox full.
            <para>Error code: 1282(0x501).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceError">
            <summary>
            error class &lt;device error"&gt;
            <para>Error code: 1792(0x700).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceServiceNotSupported">
            <summary>
            Service is not supported by server.
            <para>Error code: 1793(0x701).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceInvalidGroup">
            <summary>
            Invalid index group.
            <para>Error code: 1794(0x702).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceInvalidOffset">
            <summary>
            Invalid index offset.
            <para>Error code: 1795(0x703).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceInvalidAccess">
            <summary>
            Reading/writing not permitted.
            <para>Error code: 1796(0x704).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceInvalidSize">
            <summary>
            Parameter size not correct.
            <para>Error code: 1797(0x705).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceInvalidData">
            <summary>
            Invalid parameter value(s).
            <para>Error code: 1798(0x706).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceNotReady">
            <summary>
            Device is not in a ready state.
            <para>Error code: 1799(0x707).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceBusy">
            <summary>
            Device is busy.
            <para>Error code: 1800(0x708).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceInvalidContext">
            <summary>
            Invalid context (must be in Windows).
            <para>Error code: 1801(0x709).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceNoMemory">
            <summary>
            Out of memory.
            <para>Error code: 1802(0x70a).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceInavlidParam">
            <summary>
            Invalid parameter value(s).
            <para>Error code: 1803(0x70b).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceNotFound">
            <summary>
            Not found(files, ...).
            <para>Error code: 1804(0x70c).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceSyntaxError">
            <summary>
            Syntax error in command or file.
            <para>Error code: 1805(0x70d).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceIncompatible">
            <summary>
            Objects do not match.
            <para>Error code: 1806(0x70e).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceExists">
            <summary>
            Object already exists.
            <para>Error code: 1807(0x70f).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceSymbolNotFound">
            <summary>
            Symbol not found.
            <para>Error code: 1808(0x7010).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceSymbolVersionInvalid">
            <summary>
            Symbol version is invalid.
            <para>Error code: 1809(0x711).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceInvalidState">
            <summary>
            Server is not i a valid state.
            <para>Error code: 1810(0x712).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceTransModeNotSupported">
            <summary>
            ADS transmode is not supported.
            <para>Error code: 1811(0x713).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceNotifyHandleInvalid">
            <summary>
            Notification handle is invalid.
            <para>Error code: 1812(0x714).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceClientUnknown">
            <summary>
            Notification vlient not registered.
            <para>Error code: 1813(0x715).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceNoMoreHandles">
            <summary>
            No more notification handles.
            <para>Error code: 1814(0x716).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceInvalidWatchsize">
            <summary>
            Size for watch to big.
            <para>Error code: 1815(0x717).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceNotInitialized">
            <summary>		
            Device is not initialized.
            <para>Errocr code: 1818(0x718).</para>		
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceTimeOut">
            <summary>
            Devicee has a timeout.
            <para>Error code: 1817(0x719).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceNoInterface">
            <summary>
            Query interface has failed.
            <para>Error code: 1818(0x71A).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceInvalidInterface">
            <summary>
            Wrong interface required.
            <para>Error code: 1819(0x71B).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceInvalidCLSID">
            <summary>
            Class ID is invalid.
            <para>Error code: 1820(0x71C).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceInvalidObjectID">
            <summary>
            Object ID is invalid.
            <para>Error code: 1821(0x71D).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientError">
            <summary>
            Error class &lt;client error&gt;
            <para>Error code: 1856(0x740).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientInvalidParameter">
            <summary>
            Parameter at service is invalid.
            <para></para>Error code: 1857(0x741).
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientListEmpty">
            <summary>
            Polling list is empty.
            <para>Error code: 1858(0x742).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientVaraiableInUse">
            <summary>
            Variable connection is already in use.
            <para>Error code: 1859(0x743).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientDuplicateInvokeID">
            <summary>
            Invoke ID already in use.
            <para>Error code: 1860(0x744).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientSyncTimeOut">
            <summary>
            Timeout has elapsed.
            <para>Error code: 1861(x745).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientW32OR">
            <summary>
            Error in win32 subsystem.
            <para>Error code: 1862(0x746).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientTimeoutInvalid">
            <summary>
            Timeout value is invalid.
            <para>Error code: 1863(0x747).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientPortNotOpen">
            <summary>
            Ads port is not opened.
            <para>Error code: 1864(0x748).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientNoAmsAddr">
            <summary>
            No AMS addr. 
            <para>Error code: 1865(0x749).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientSyncInternal">
            <summary>
            An internal in ADS sync has occured.
            <para>Error code: 1872(0x750).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientAddHash">
            <summary>
            Hash table overflow.
            <para>Error code: 1873(0x751).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientRemoveHash">
            <summary>
            There are no more symbols in the hash table.
            <para>Error code: 1874(0x752).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientNoMoreSymbols">
            <summary>
            There are no more symbols in cache.
            <para>Error code: 1875(0x753).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientSyncResInvalid">
            <summary>
            An invalid response has been received.
            <para>Error code: 1876(0x754).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientSyncPortLocked">
            <summary>
            Sync port is locked.
            <para>Error code: 1877(0x755).</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientQueueFull">
            <summary>
            Client queue is full		
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.TcReg.KeyNameSystem">
            <summary>
            "Software\\Beckhoff\\TwinCAT\\System"
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.TcReg.KeyNameInstPathTc2">
            <summary>
            Installation Path (TwinCAT2) Registry Key ("InstallationPath")
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.TcReg.KeyNameInstPathTc3">
            <summary>
            Installation Path (TwinCAT3) Registry Key ("InstallDir")
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.TcReg.RootTc2">
            <summary>
            Registry TwinCAT Root path (TwinCAT 2)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.TcReg.RootTc3">
            <summary>
            Registry TwinCAT Root path (TwinCAT 3)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.TcReg._tcInstallation">
            <summary>
            TwinCAT Installation type
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.TcReg._tcInstallationPath">
            <summary>
            TwinCAT Installation path
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TcReg.TryGetTwinCAT2Path(System.String@)">
            <summary>
            Tries to get the TwinCAT 2 Installation Path (if installed)
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.TcReg.TryGetTwinCAT3Path(System.String@)">
            <summary>
            Tries to get the TwinCAT 3 Installation Path (if installed)
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="P:TwinCAT.Ads.TcReg.RootPath">
            <summary>
            Gets the root path ("Software\\Beckhoff\\TwinCAT", or "Software\\Beckhoff\\TwinCAT3")
            </summary>
            <value>The root.</value>
        </member>
        <member name="P:TwinCAT.Ads.TcReg.LocalNetId">
            <summary>
            Gets the AmsNet ID from the Registry
            </summary>
            <value>The ams net id.</value>
        </member>
        <member name="P:TwinCAT.Ads.TcReg.SystemRegKey">
            <summary> 
            Gets the SystemKey registry key (Don't forget to close the key) "HKLM\\Software\\Beckhoff\\TwinCAT\\System";
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.TcReg.TwinCATSubSystemType">
            <summary>
            Enumeration describes whether Tc2 or Tc3 is associated.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.TcReg.TwinCATSubSystemType.None">
            <summary>
            No installation found / Uninitialized
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.TcReg.TwinCATSubSystemType.Tc2">
            <summary>
            Tc2 Installation detected
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.TcReg.TwinCATSubSystemType.Tc3">
            <summary>
            Tc3 Installation detected
            </summary>
        </member>
    </members>
</doc>
